openapi: 3.0.0
info:
  title: Car_rental
  version: 0.0.1
servers:
- url: http:localhost:8000/api/v1/
  description: Main server
paths:
  /car:
    post:
      tags:
        - car
      summary: Add a new car to the store
      operationId: addCar
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '405':
          description: Invalid input
      security:
        - admin_auth:
          - admin
  /car/{model}:
    get:
      summary: Getting car for rent by model
      tags:
        - car
      operationId: getCarByModel
      parameters:
        - name: model
          in: path
          required: true
          description: Model of car for rent
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Car"
        '404':
            description: Car not found
  /cars:
    get:
      summary: Getting all cars for rent
      tags:
        - car
      operationId: getAllCars
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
        '404':
            description: Cars not found
  /car/{car_id}:
    put:
      summary: Update car
      tags:
        - car
      operationId: updateCar
      parameters:
        - name: car_id
          in: path
          description: Car that will be updated
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated car object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '400':
          description: Invalid car_id supplied
        '404':
          description: Car not found
        '405':
          description: Validation exception
      security:
        - admin_auth:
          - admin
    delete:
      summary: Delete car for rent by id
      tags:
        - car
      operationId: deleteCarByID
      parameters:
        - name: car_id
          in: path
          required: true
          description: Car that will be deleted
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '400':
          description: Invalid car_id supplied
        '404':
          description: Car not found
        '405':
          description: Validation exception
      security:
        - admin_auth:
          - admin
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in administrator.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '409':
          description: User already exists
  /user/login:
    get:
      tags:
        - user
      summary: Log in user/administrator into the system
      operationId: loginUser
      parameters:
        - name: email
          in: query
          description: Email for log in
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: Password for log in
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Log out current logged in user/administrator session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  /user/{user_id}:
    get:
      tags:
        - user
      summary: Get user by user id
      operationId: getUserById
      parameters:
        - name: user_id
          in: path
          description: ID of user that needs to be fetched
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid user_id supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in administrator.
      operationId: updateUser
      parameters:
        - name: user_id
          in: path
          description: User that will be updated
          required: true
          schema:
            type: integer
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid user_id supplied
        '404':
          description: User not found
      security:
        - user_auth:
          - user
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in administrator.
      operationId: deleteUser
      parameters:
        - name: user_id
          in: path
          description: User that will be deleted
          required: true
          schema:
            type: integer
      responses:
        '400':
          description: Invalid user_id supplied
        '404':
          description: User not found
      security:
        - user_auth:
          - user
  /order:
    post:
      tags:
        - order
      summary: Create order for car
      operationId: createOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid order
      security:
        - user_auth:
          - user
  /order/{order_id}:
    get:
      tags:
        - order
      summary: Get order by id
      operationId: getOrderById
      parameters:
        - name: order_id
          in: path
          description: Order that will be returned
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid order_id supplied
        '404':
          description: Order not found
      security:
        - user_auth:
          - user
    delete:
      tags:
        - order
      summary: Delete order for car
      operationId: deleteOrder
      parameters:
        - name: order_id
          in: path
          description: Order that will be deleted
          required: true
          schema:
            type: integer
      responses:
        '400':
          description: Invalid order_id supplied
        '404':
          description: Order not found
      security:
        - user_auth:
          - user
components:
  schemas:
    Car:
      type: object
      required:
        - name
        - status
      properties:
        car_id:
          type: string
        model:
          type: string
        status:
          type: string
          enum:
            - new
            - old
            - used
    User:
      type: object
      properties:
        id:
          type: integer
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        password:
          type: string
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user_id:
          type: integer
          format: int64
        car_id:
          type: integer
          format: int64
        price:
          type: number
          format: double
        status:
          type: string
          enum:
            - accepted
            - denied
            - unprocessed
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
  securitySchemes:
    user_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://localhost:8000/oauth/user
          scopes:
            user: Grants user access
    admin_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://localhost:8000/oauth/admin
          scopes:
            admin: Grants admin access